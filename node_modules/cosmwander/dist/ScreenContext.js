"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAppContext = exports.AppWrapper = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const fileUtils_1 = require("../utils/fileUtils");
function defaultSetter() {}
const AppContext = (0, react_1.createContext)({
  width: 0,
  height: 0,
  contract: null,
  codeId: '',
  contractInstanceAddress: '',
  env: '',
  command: undefined,
  logAppendContent: '',
  setWidth: defaultSetter,
  setHeight: defaultSetter,
  setContract: defaultSetter,
  setCodeId: defaultSetter,
  setContractInstanceAddress: defaultSetter,
  setEnv: defaultSetter,
  setCommand: defaultSetter,
  log: (..._args) => {}
});
function AppWrapper({
  screen,
  children
}) {
  const [width, setWidth] = (0, react_1.useState)(0);
  const [height, setHeight] = (0, react_1.useState)(0);
  const [contract, setContract] = (0, react_1.useState)(null);
  const [codeId, setCodeId] = (0, react_1.useState)('');
  const [contractInstanceAddress, setContractInstanceAddress] = (0, react_1.useState)('');
  const [env, setEnv] = (0, react_1.useState)('testnet');
  const [command, setCommand] = (0, react_1.useState)(undefined);
  const [logAppendContent, setLogAppendContent] = (0, react_1.useState)('');
  (0, react_1.useEffect)(() => {
    setWidth(screen.width);
    setHeight(screen.height);
    screen.on('resize', newScreen => {
      console.log({
        newScreen
      });
      setWidth(screen.width);
      setHeight(screen.height);
    });
  }, []);
  (0, react_1.useEffect)(() => {
    if (contract && contract.fileName && env) {
      (0, fileUtils_1.saveMeta)(contract, env);
    }
  }, [contract]);
  let sharedState = {
    width,
    setWidth,
    height,
    setHeight,
    contract,
    setContract,
    codeId,
    setCodeId,
    contractInstanceAddress,
    setContractInstanceAddress,
    env,
    setEnv,
    command,
    setCommand,
    logAppendContent,
    log: (...args) => {
      setLogAppendContent(args.map(a => {
        if (typeof a === 'object') return JSON.stringify(a);
        return a;
      }).join(' ') + '\n');
    }
  };
  return (0, jsx_runtime_1.jsx)(AppContext.Provider, {
    value: sharedState,
    children: children
  });
}
exports.AppWrapper = AppWrapper;
function useAppContext() {
  return (0, react_1.useContext)(AppContext);
}
exports.useAppContext = useAppContext;