"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadMeta = exports.getActiveCode = exports.saveMeta = exports.createWanderStore = exports.getDefaultForContractInstance = exports.getDefaultForCodeId = exports.getDefaultForContractFilename = exports.getContractDirectory = exports.formatWithUnderscores = exports.getContractDetails = exports.getOptimizedArtifactsDetails = exports.getWasmArtifactsDetails = exports.getOptimizedArtifactPath = exports.getWasmArtifactPath = exports.getFileDetails = exports.getCWD = void 0;
const fs_1 = __importDefault(require("fs"));
function getCWD() {
  return process.cwd();
}
exports.getCWD = getCWD;
function getFileDetails(filePath) {
  return fs_1.default.statSync(filePath);
}
exports.getFileDetails = getFileDetails;
const getWasmArtifactPath = contract => `${getCWD()}/target/wasm32-unknown-unknown/release/${formatWithUnderscores(contract)}.wasm`;
exports.getWasmArtifactPath = getWasmArtifactPath;
const getOptimizedArtifactPath = contract => `${getCWD()}/artifacts/${formatWithUnderscores(contract)}.wasm`;
exports.getOptimizedArtifactPath = getOptimizedArtifactPath;
function getWasmArtifactsDetails(contract) {
  try {
    const filePath = (0, exports.getWasmArtifactPath)(contract);
    return getFileDetails(filePath);
  } catch (e) {
    return null;
  }
}
exports.getWasmArtifactsDetails = getWasmArtifactsDetails;
function getOptimizedArtifactsDetails(contract) {
  try {
    const filePath = (0, exports.getWasmArtifactPath)(contract);
    return getFileDetails(filePath);
  } catch (e) {
    return null;
  }
}
exports.getOptimizedArtifactsDetails = getOptimizedArtifactsDetails;
function getContractDetails(contract) {
  return {
    wasm: getWasmArtifactsDetails(contract),
    optimized: getOptimizedArtifactsDetails(contract)
  };
}
exports.getContractDetails = getContractDetails;
function formatWithUnderscores(contract) {
  return contract.replace(/-/g, '_');
}
exports.formatWithUnderscores = formatWithUnderscores;
function getContractDirectory(contract) {
  return `${getCWD()}/contracts/${contract}`;
}
exports.getContractDirectory = getContractDirectory;
function getDefaultForContractFilename(contract) {
  return {
    fileName: contract,
    buildName: formatWithUnderscores(contract),
    codes: [],
    initMsgs: [],
    executeMsgs: [],
    queryMsgs: []
  };
}
exports.getDefaultForContractFilename = getDefaultForContractFilename;
function getDefaultForCodeId(codeID) {
  return {
    codeID,
    deployedContracts: []
  };
}
exports.getDefaultForCodeId = getDefaultForCodeId;
function getDefaultForContractInstance(address) {
  return {
    address
  };
}
exports.getDefaultForContractInstance = getDefaultForContractInstance;
function getEnvPath(env) {
  const cwd = getCWD();
  return `${cwd}/.cosmwander/${env}`;
}
function loadEnvs() {
  const cwd = getCWD();
  const envs = fs_1.default.readdirSync(`${cwd}/.cosmwander`);
  return envs;
}
function getContractPath(env, fname) {
  const cwd = getCWD();
  return `${cwd}/.cosmwander/${env}/contracts/${fname}.json`;
}
function createWanderStore(env) {
  const cwd = getCWD();
  if (env) {
    if (!fs_1.default.existsSync(getEnvPath(env))) fs_1.default.mkdirSync(`${getEnvPath(env)}/contracts`, {
      recursive: true
    });
  } else {
    if (!fs_1.default.existsSync(`${cwd}/.cosmwander`)) fs_1.default.mkdirSync(`${cwd}/.cosmwander`);
  }
}
exports.createWanderStore = createWanderStore;
function saveMeta(contractMeta, env) {
  if (!fs_1.default.existsSync(`${getEnvPath(env)}/contracts`)) {
    createWanderStore(env);
  }
  const {
    fileName
  } = contractMeta;
  const contractStateFilePath = getContractPath(env, fileName);
  if (!fs_1.default.existsSync(contractStateFilePath)) {
    fs_1.default.writeFileSync(contractStateFilePath, '');
  }
  fs_1.default.writeFileSync(contractStateFilePath, JSON.stringify(contractMeta, null, 2));
}
exports.saveMeta = saveMeta;
function getActiveCode(contract, codeID) {
  return contract.codes.find(c => c.codeID === codeID);
}
exports.getActiveCode = getActiveCode;
function loadMeta(contractFileName, env) {
  if (!env || !fs_1.default.existsSync(getContractPath(env, contractFileName))) return getDefaultForContractFilename(contractFileName);
  const contractStateFilePath = getContractPath(env, contractFileName);
  const contractMeta = JSON.parse(fs_1.default.readFileSync(contractStateFilePath, 'utf8'));
  if (!contractMeta.initMsgs) {
    contractMeta.initMsgs = [];
  }
  if (!contractMeta.executeMsgs) {
    contractMeta.executeMsgs = [];
  }
  if (!contractMeta.queryMsgs) {
    contractMeta.queryMsgs = [];
  }
  return contractMeta;
}
exports.loadMeta = loadMeta;