"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
const jsx_runtime_1 = require("react/jsx-runtime");
const chalk_1 = __importDefault(require("chalk"));
const react_1 = require("react");
const ScreenContext_1 = require("../../context/ScreenContext");
const commandUtils_1 = require("../../utils/commandUtils");
const fileUtils_1 = require("../../utils/fileUtils");
const CodeWindow = () => {
  const {
    contract,
    setContract,
    codeId,
    setCodeId,
    setContractInstanceAddress,
    command,
    setCommand,
    width,
    env,
    log
  } = (0, ScreenContext_1.useAppContext)();
  const [view, setView] = (0, react_1.useState)(contract?.initMsgs.length ? 'saved-msgs' : 'new-msg');
  const [activeMsg, setActiveMsg] = (0, react_1.useState)(null);
  const msgTitle = (0, react_1.useRef)(null);
  const input = (0, react_1.useRef)(null);
  const saveInitMsg = () => {
    const title = msgTitle.current.getValue();
    const msg = input.current.getValue();
    log(`saving new msg: ${title}`);
    if (contract && contract.fileName && codeId && env) {
      setContract({
        ...contract,
        initMsgs: activeMsg === null ? [...contract.initMsgs, {
          title,
          msg
        }] : contract.initMsgs.map((m, i) => {
          if (i === activeMsg) return {
            title,
            msg
          };
          return m;
        })
      });
      setView('saved-msgs');
      setActiveMsg(null);
    } else {
      log('error saving msg: contract, codeId, or env not set for some reason');
    }
  };
  const deleteMsg = i => {
    if (contract && contract.fileName && codeId && env) {
      setContract({
        ...contract,
        initMsgs: contract.initMsgs.filter((_, j) => j !== i)
      });
    } else {
      log('error deleting msg: contract, codeId, or env not set for some reason');
    }
  };
  function listContractsByCodeCallback(output) {
    if (!output) return;
    log(output);
    const contracts = JSON.parse(output.split('\n')[0]).contracts;
    const contractAddress = contracts[contracts.length - 1];
    log(chalk_1.default.bold(chalk_1.default.red('deployed contract address: ' + contractAddress)));
    setContract({
      ...contract,
      codes: contract.codes.map(codeMeta => {
        if (codeMeta.codeID === codeId) {
          return {
            ...codeMeta,
            deployedContracts: [...codeMeta.deployedContracts, {
              address: contractAddress,
              executeMsgs: [],
              queryMsgs: []
            }]
          };
        }
        return codeMeta;
      })
    });
    setContractInstanceAddress(contractAddress);
  }
  function initCallback(_output) {
    if (!_output) return;
    log('init complete, fetching contract address...');
    const envConfig = (0, commandUtils_1.getEnv)(env);
    setCommand({
      command: envConfig.command,
      args: ['query', 'wasm', 'list-contract-by-code', codeId, '--output', 'json', '--node', envConfig.node],
      cwd: (0, fileUtils_1.getCWD)(),
      callback: listContractsByCodeCallback
    });
  }
  const sendInitMsg = i => {
    if (contract && contract.fileName && codeId && env) {
      const msg = contract.initMsgs[i];
      const envConfig = (0, commandUtils_1.getEnv)(env);
      setCommand({
        command: envConfig.command,
        args: ['tx', 'wasm', 'instantiate', codeId, msg.msg, '--from', envConfig.keyName, '--label', msg.title, '--gas-prices', envConfig.feeAmount + envConfig.feeDenom, '--gas', 'auto', '--gas-adjustment', '1.3', '-b', 'block', '-y', '--no-admin', '--node', envConfig.node, '--chain-id', envConfig.chainId],
        cwd: (0, fileUtils_1.getCWD)(),
        callback: initCallback
      });
    } else {
      log('error sending msg: contract, codeId, or env not set for some reason');
    }
  };
  (0, react_1.useEffect)(() => {
    if (msgTitle.current && input.current) {
      msgTitle.current.setValue(`${contract?.fileName}'s init message`);
      msgTitle.current.key(['escape', 'C-c'], () => {
        msgTitle.current.cancel();
      });
      input.current.key(['escape', 'C-c'], () => {
        input.current.cancel();
      });
    }
  }, []);
  (0, react_1.useEffect)(() => {
    if (activeMsg !== null && view === 'new-msg') {
      const msg = contract.initMsgs[activeMsg];
      log(`loading msg ${activeMsg}: ${msg.title}`);
      msgTitle.current.setValue(msg.title);
      input.current.setValue(msg.msg);
    }
  }, [activeMsg, view]);
  return (0, jsx_runtime_1.jsxs)("box", {
    top: 0,
    left: 0,
    children: [(0, jsx_runtime_1.jsx)("text", {
      left: 1,
      children: chalk_1.default.bold(`Code ID: ${codeId} Init Msg`) + chalk_1.default.gray(' (press esc if stuck)')
    }), view === 'new-msg' ? (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, {
      children: [(0, jsx_runtime_1.jsx)("textbox", {
        label: chalk_1.default.green(' msg title (for saving)'),
        top: 1,
        height: 3,
        border: {
          type: 'line'
        },
        ref: msgTitle,
        keys: true,
        inputOnFocus: true,
        mouse: true
      }), (0, jsx_runtime_1.jsx)("textarea", {
        label: chalk_1.default.green(' msg value (must be valid json) '),
        ref: input,
        inputOnFocus: true,
        top: 4,
        height: 6,
        keys: true,
        mouse: true,
        border: {
          type: 'line'
        }
      }), (0, jsx_runtime_1.jsx)("button", {
        top: 10,
        height: 3,
        width: '50%-1',
        border: {
          type: 'line'
        },
        mouse: true,
        onPress: () => setView('saved-msgs'),
        children: "Go to saved msgs"
      }), (0, jsx_runtime_1.jsx)("button", {
        top: 10,
        height: 3,
        width: '50%-1',
        right: 0,
        border: {
          type: 'line'
        },
        mouse: true,
        onPress: saveInitMsg,
        children: "Save this message"
      })]
    }) : (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, {
      children: [contract?.initMsgs.map((msg, i) => {
        return (0, jsx_runtime_1.jsxs)("box", {
          top: i * 3,
          height: 3,
          width: '100%',
          children: [(0, jsx_runtime_1.jsx)("button", {
            top: 0,
            height: 3,
            width: '60%',
            border: {
              type: 'line'
            },
            mouse: true,
            onPress: () => {
              setActiveMsg(i);
              setView('new-msg');
            },
            children: msg.title
          }), (0, jsx_runtime_1.jsx)("button", {
            top: 0,
            height: 3,
            width: '15%',
            left: '60%+1',
            border: {
              type: 'line'
            },
            mouse: true,
            onPress: () => deleteMsg(i),
            children: ` X `
          }), (0, jsx_runtime_1.jsx)("button", {
            top: 0,
            height: 3,
            width: '25%',
            right: 0,
            border: {
              type: 'line'
            },
            mouse: true,
            onPress: () => sendInitMsg(i),
            children: ` Init `
          })]
        }, i);
      }), (0, jsx_runtime_1.jsx)("button", {
        right: 0,
        width: 20,
        bottom: 0,
        height: 3,
        border: {
          type: 'line'
        },
        mouse: true,
        onPress: () => setView('new-msg'),
        children: "Add new Msg"
      })]
    })]
  });
};
exports.default = CodeWindow;