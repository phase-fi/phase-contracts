"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
const jsx_runtime_1 = require("react/jsx-runtime");
const chalk = require("chalk");
const react_1 = require("react");
const ScreenContext_1 = require("../../context/ScreenContext");
const GenericMsgTab = ({
  label,
  type,
  savedMsgs,
  includeFunds,
  saveMsg,
  deleteMsg,
  sendMsg
}) => {
  const {
    contract,
    setContract,
    codeId,
    setCodeId,
    setContractInstanceAddress,
    command,
    setCommand,
    width,
    env,
    log
  } = (0, ScreenContext_1.useAppContext)();
  const [view, setView] = (0, react_1.useState)(savedMsgs.length ? 'saved-msgs' : 'new-msg');
  const [activeMsg, setActiveMsg] = (0, react_1.useState)(null);
  const msgTitle = (0, react_1.useRef)(null);
  const input = (0, react_1.useRef)(null);
  const funds = (0, react_1.useRef)(null);
  const saveMsgWrapper = () => {
    const title = msgTitle.current.getValue();
    const msg = input.current.getValue();
    const funds = funds.current.getValue();
    log(`saving new msg: ${title}`);
    if (contract && contract.fileName && codeId && env) {
      saveMsg({
        title,
        msg,
        funds
      }, activeMsg);
      setView('saved-msgs');
      setActiveMsg(null);
    } else {
      log('error saving msg: contract, codeId, or env not set for some reason');
    }
  };
  const deleteMsgWrapper = i => {
    if (contract && contract.fileName && codeId && env) {
      deleteMsg(i);
    } else {
      log('error deleting msg: contract, codeId, or env not set for some reason');
    }
  };
  const sendMsgWrapper = i => {
    if (contract && contract.fileName && codeId && env) {
      sendMsg(savedMsgs[i]);
    } else {
      log('error sending msg: contract, codeId, or env not set for some reason');
    }
  };
  (0, react_1.useEffect)(() => {
    try {
      if (funds.current) {
        funds.current.key(['escape', 'C-c'], () => {
          funds.current.cancel();
        });
        funds.current.setValue('0');
      }
      if (msgTitle.current && input.current) {
        msgTitle.current.setValue(`${contract?.fileName}'s ${type} message`);
        msgTitle.current.key(['escape', 'C-c'], () => {
          msgTitle.current.cancel();
        });
        msgTitle.current.key(['tab'], () => {
          msgTitle.current.cancel();
          input.current.focus();
        });
        input.current.key(['escape', 'C-c'], () => {
          input.current.cancel();
        });
      }
    } catch (e) {
      console.error(e);
    }
  }, []);
  (0, react_1.useEffect)(() => {
    if (activeMsg !== null && view === 'new-msg') {
      const msg = savedMsgs[activeMsg];
      log(`loading msg ${activeMsg}: ${msg.title}`);
      msgTitle.current.setValue(msg.title);
      input.current.setValue(msg.msg);
    }
  }, [activeMsg, view]);
  return (0, jsx_runtime_1.jsxs)("box", {
    top: 0,
    left: 0,
    children: [(0, jsx_runtime_1.jsx)("text", {
      left: 1,
      children: chalk.bold(chalk.bgGreen(`${label}`)) + chalk.gray(' (press esc if stuck)')
    }), view === 'new-msg' ? (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, {
      children: [(0, jsx_runtime_1.jsx)("textbox", {
        label: chalk.green(' msg title (for saving)'),
        top: 1,
        height: 3,
        border: {
          type: 'line'
        },
        ref: msgTitle,
        keys: true,
        inputOnFocus: true,
        mouse: true
      }), (0, jsx_runtime_1.jsx)("textarea", {
        label: chalk.green(' msg value (valid json) '),
        ref: input,
        inputOnFocus: true,
        top: 4,
        height: 6,
        width: includeFunds ? '70%-1' : '100%-1',
        keys: true,
        mouse: true,
        border: {
          type: 'line'
        }
      }), includeFunds && (0, jsx_runtime_1.jsx)("textarea", {
        label: chalk.green(' funds '),
        ref: funds,
        inputOnFocus: true,
        top: 4,
        height: 6,
        left: '70%',
        border: {
          type: 'line'
        },
        keys: true,
        mouse: true
      }), (0, jsx_runtime_1.jsx)("button", {
        top: 10,
        height: 3,
        width: '50%-1',
        border: {
          type: 'line'
        },
        mouse: true,
        onPress: () => setView('saved-msgs'),
        children: "Go to saved msgs"
      }), (0, jsx_runtime_1.jsx)("button", {
        top: 10,
        height: 3,
        width: '50%-1',
        right: 0,
        border: {
          type: 'line'
        },
        mouse: true,
        onPress: saveMsgWrapper,
        children: "Save this message"
      })]
    }) : (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, {
      children: [savedMsgs.map((msg, i) => {
        return (0, jsx_runtime_1.jsxs)("box", {
          top: i * 3 + 1,
          height: 3,
          width: '100%',
          children: [(0, jsx_runtime_1.jsx)("button", {
            top: 0,
            height: 3,
            width: '60%',
            border: {
              type: 'line'
            },
            mouse: true,
            onPress: () => {
              setActiveMsg(i);
              setView('new-msg');
            },
            children: msg.title
          }), (0, jsx_runtime_1.jsx)("button", {
            top: 0,
            height: 3,
            width: '15%',
            left: '60%+1',
            border: {
              type: 'line'
            },
            mouse: true,
            onPress: () => deleteMsgWrapper(i),
            children: ` X `
          }), (0, jsx_runtime_1.jsx)("button", {
            top: 0,
            height: 3,
            width: '25%',
            right: 0,
            border: {
              type: 'line'
            },
            mouse: true,
            onPress: () => sendMsgWrapper(i),
            children: ` ${type.toLocaleUpperCase()} `
          })]
        }, i);
      }), (0, jsx_runtime_1.jsx)("button", {
        right: 0,
        width: 20,
        bottom: 0,
        height: 3,
        border: {
          type: 'line'
        },
        mouse: true,
        onPress: () => setView('new-msg'),
        children: "Add new Msg"
      })]
    })]
  });
};
exports.default = GenericMsgTab;