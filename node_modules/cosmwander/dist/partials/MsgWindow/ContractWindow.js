"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
const jsx_runtime_1 = require("react/jsx-runtime");
const chalk = require("chalk");
const ScreenContext_1 = require("../../context/ScreenContext");
const commandUtils_1 = require("../../utils/commandUtils");
const fileUtils_1 = require("../../utils/fileUtils");
const ContractWindow = ({
  contractDetails
}) => {
  const {
    contract,
    setContract,
    setCodeId,
    setCommand,
    env,
    log
  } = (0, ScreenContext_1.useAppContext)();
  function handleBuildWasm() {
    setCommand({
      command: 'cargo',
      args: ['build', '--release', '--target', 'wasm32-unknown-unknown'],
      cwd: (0, fileUtils_1.getContractDirectory)(contract.fileName),
      env: {
        RUSTFLAGS: '-C link-arg=-s'
      }
    });
  }
  function handleBuildOptimized() {
    const path = (0, fileUtils_1.getCWD)();
    setCommand({
      command: 'docker',
      args: ['run', '--rm', '-v', `${path}:/code`, '--mount', `type=volume,source=${path.split('/')[path.split('/').length - 1]}_cache,target=/code/target`, '--mount', 'type=volume,source=registry_cache,target=/usr/local/cargo/registry', 'cosmwasm/rust-optimizer:0.12.6'],
      cwd: path
    });
  }
  function uploadCallback(output) {
    if (!output) {
      log('No output from upload command.');
      return;
    }
    const events = JSON.parse(output.split('\n')[1]).logs[0].events;
    const codeID = events[events.length - 1].attributes[0].value;
    if (!codeID) {
      log("Couldn't find codeId in output. Please check the output and try again.");
      return;
    }
    log(chalk.bold(chalk.red('CODE ID: ')) + codeID);
    const updatedContract = {
      ...contract,
      codes: [...contract.codes, (0, fileUtils_1.getDefaultForCodeId)(codeID)]
    };
    setContract(updatedContract);
    setCodeId(codeID);
    (0, fileUtils_1.saveMeta)(updatedContract, env);
  }
  function handleUploadWasm() {
    const envConfig = (0, commandUtils_1.getEnv)(env, log);
    setCommand({
      command: envConfig.command,
      args: (0, commandUtils_1.getArgsForUploadType)('wasm', {
        contract: contract.fileName,
        envConfig
      }),
      cwd: (0, fileUtils_1.getCWD)(),
      callback: uploadCallback
    });
  }
  function handleUploadOpt() {
    const envConfig = (0, commandUtils_1.getEnv)(env, log);
    setCommand({
      command: envConfig.command,
      args: (0, commandUtils_1.getArgsForUploadType)('optimized', {
        contract: contract.fileName,
        envConfig
      }),
      cwd: (0, fileUtils_1.getCWD)(),
      callback: uploadCallback
    });
  }
  const detailTextLines = ['Last WASM build:', contractDetails?.wasm ? contractDetails.wasm.mtime.toDateString() : '', contractDetails?.wasm ? contractDetails.wasm.mtime.toTimeString() : '', '', 'Last optimized build:', contractDetails?.optimized ? contractDetails.optimized.mtime.toDateString() : '', contractDetails?.optimized ? contractDetails.optimized.mtime.toTimeString() : ''];
  const detailText = detailTextLines.join('\n');
  return (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, {
    children: [(0, jsx_runtime_1.jsx)("text", {
      top: 1,
      left: 1,
      children: detailText
    }), contractDetails?.wasm && (0, jsx_runtime_1.jsx)("button", {
      border: {
        type: 'line'
      },
      top: 1,
      height: 3,
      width: 15,
      right: 1,
      mouse: true,
      onPress: handleUploadWasm,
      children: "Upload WASM"
    }), contractDetails?.optimized && (0, jsx_runtime_1.jsx)("button", {
      border: {
        type: 'line'
      },
      top: 6,
      height: 3,
      width: 15,
      right: 1,
      mouse: true,
      onPress: handleUploadOpt,
      children: "Upload Opt"
    }), (0, jsx_runtime_1.jsx)("button", {
      top: detailTextLines.length + 2,
      left: 1,
      height: 3,
      width: 18,
      border: {
        type: 'line'
      },
      mouse: true,
      onPress: handleBuildWasm,
      children: "Build WASM"
    }), (0, jsx_runtime_1.jsx)("button", {
      top: detailTextLines.length + 2,
      left: 1 + 18 + 1,
      height: 3,
      width: 18,
      border: {
        type: 'line'
      },
      mouse: true,
      onPress: handleBuildOptimized,
      children: "Build Optimized"
    })]
  });
};
exports.default = ContractWindow;