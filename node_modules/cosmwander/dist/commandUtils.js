"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getArgsForUploadType = exports.getEnv = void 0;
const EnvList_1 = require("../partials/EnvList");
const fileUtils_1 = require("./fileUtils");
function getEnv(env, log) {
  const envConfig = EnvList_1.envConfigs.find(e => e.chainId === env);
  if (!envConfig) {
    if (log) log('No env found, please select one from the environment list');
    throw new Error('No env config found for uploading wasm');
  }
  return envConfig;
}
exports.getEnv = getEnv;
function getArgsForUploadType(uploadType, uploadOpts) {
  const {
    contract,
    envConfig
  } = uploadOpts;
  return ['tx', 'wasm', 'store', uploadType === 'wasm' ? (0, fileUtils_1.getWasmArtifactPath)(contract) : (0, fileUtils_1.getOptimizedArtifactPath)(contract), '--from', envConfig.keyName, '-y', '--output', 'json', '-b', 'block', '--node', envConfig.node, '--chain-id', 'quasar', '--gas-prices', envConfig.feeAmount + envConfig.feeDenom, '--gas', 'auto', '--gas-adjustment', '1.3'];
}
exports.getArgsForUploadType = getArgsForUploadType;