"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const ScreenContext_1 = require("../context/ScreenContext");
const fs_1 = __importDefault(require("fs"));
const fileUtils_1 = require("../utils/fileUtils");
const chalk_1 = __importDefault(require("chalk"));
const Contracts = ({}) => {
  const {
    width,
    height,
    contract,
    setContract,
    codeId,
    setCodeId,
    contractInstanceAddress,
    setContractInstanceAddress,
    env,
    log
  } = (0, ScreenContext_1.useAppContext)();
  const [contracts, setContracts] = (0, react_1.useState)([]);
  const [err, setErr] = (0, react_1.useState)('');
  (0, react_1.useEffect)(() => {
    const rootPath = (0, fileUtils_1.getCWD)();
    const contractsPath = `${rootPath}/contracts`;
    const files = fs_1.default.readdir(contractsPath, (err, files) => {
      if (err) {
        console.log(err);
        setErr(err.message);
      } else {
        setErr('');
        setContracts(files.filter(file => fs_1.default.lstatSync(`${contractsPath}/${file}`).isDirectory() && fs_1.default.existsSync(`${contractsPath}/${file}/Cargo.toml`)));
      }
    });
  }, []);
  function getContractDisplayHeight(c) {
    let contractDisplayHeight = 3;
    if (contract?.fileName === c && contract.codes.length) contractDisplayHeight += contract.codes.length + contract.codes.reduce((a, c) => a + c.deployedContracts.length, 0);
    return contractDisplayHeight;
  }
  function setSelection(c, codeID, contractAddress) {
    log(`Setting contract to ${c} and codeID to ${codeID || 'undefined'}`);
    const meta = (0, fileUtils_1.loadMeta)(c, env);
    setContract(meta);
    if (codeID) setCodeId(codeID);else setCodeId('');
    if (contractAddress) setContractInstanceAddress(contractAddress);else setContractInstanceAddress('');
  }
  function getTopForContract(i) {
    return contracts.reduce((acc, c, j) => {
      if (j < i) {
        return acc + getContractDisplayHeight(c);
      }
      return acc;
    }, 0);
  }
  function renderContract(c) {
    return (0, jsx_runtime_1.jsx)("button", {
      height: 1,
      mouse: true,
      onPress: () => setSelection(c, ''),
      children: `${c}`
    }, c);
  }
  function renderActiveContract(c, cMeta, i) {
    let render = [renderContract(`${!codeId ? chalk_1.default.inverse(c) : c}`)];
    if (contract?.fileName === c && contract.codes.length) {
      contract.codes.forEach((codeMeta, i) => {
        const codeIdText = `└ ${codeMeta.codeID}`;
        render.push((0, jsx_runtime_1.jsx)("button", {
          mouse: true,
          onPress: () => setSelection(c, codeMeta.codeID),
          top: i + 1,
          height: 1,
          children: codeId === codeMeta.codeID && !contractInstanceAddress ? chalk_1.default.inverse(codeIdText) : codeIdText
        }, c + codeMeta.codeID));
        codeMeta.deployedContracts.forEach((contractInstance, j) => {
          const contractInstanceText = `  └ ${contractInstance.address.slice(0, 8)}...${contractInstance.address.slice(-8)}`;
          render.push((0, jsx_runtime_1.jsx)("button", {
            mouse: true,
            onPress: () => setSelection(c, codeMeta.codeID, contractInstance.address),
            top: i + 1 + j + 1,
            height: 1,
            children: contractInstance.address === contractInstanceAddress ? chalk_1.default.inverse(contractInstanceText) : contractInstanceText
          }, c + codeMeta.codeID + contractInstance.address));
        });
      });
    }
    return render;
  }
  return (0, jsx_runtime_1.jsx)("box", {
    label: ' contracts ',
    border: {
      type: 'line'
    },
    top: 0,
    height: '100%',
    width: '100%',
    children: err ? (0, jsx_runtime_1.jsx)("text", {
      style: {
        fg: 'red'
      },
      children: err
    }) : contracts.map((c, i) => {
      let render;
      if (contract?.fileName === c) {
        const cMeta = (0, fileUtils_1.loadMeta)(c, env);
        render = renderActiveContract(c, cMeta, i);
      } else {
        render = renderContract(c);
      }
      const top = getTopForContract(i);
      const height = getContractDisplayHeight(c);
      return (0, jsx_runtime_1.jsx)("box", {
        top: top,
        height: height,
        border: {
          type: 'line'
        },
        children: render
      }, c);
    })
  });
};
exports.default = Contracts;